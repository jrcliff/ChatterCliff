[{"/Users/justinc/Flatiron/projects/phase5/frontend/src/components/Home.js":"1","/Users/justinc/Flatiron/projects/phase5/frontend/src/components/ChatRoomWebSocket.js":"2","/Users/justinc/Flatiron/projects/phase5/frontend/src/components/Messages.js":"3","/Users/justinc/Flatiron/projects/phase5/frontend/src/App.js":"4","/Users/justinc/Flatiron/projects/phase5/frontend/src/constants/index.js":"5","/Users/justinc/Flatiron/projects/phase5/frontend/src/components/NewMessage.js":"6","/Users/justinc/Flatiron/projects/phase5/frontend/src/components/LoginForm.js":"7","/Users/justinc/Flatiron/projects/phase5/frontend/src/components/SubList.js":"8","/Users/justinc/Flatiron/projects/phase5/frontend/src/components/Room.js":"9","/Users/justinc/Flatiron/projects/phase5/frontend/src/components/NewRoom.js":"10","/Users/justinc/Flatiron/projects/phase5/frontend/src/components/Subscribe.js":"11"},{"size":3489,"mtime":1611717302533,"results":"12","hashOfConfig":"13"},{"size":703,"mtime":1611680270455,"results":"14","hashOfConfig":"13"},{"size":1678,"mtime":1611717848556,"results":"15","hashOfConfig":"13"},{"size":2281,"mtime":1611719544068,"results":"16","hashOfConfig":"13"},{"size":200,"mtime":1611657147260,"results":"17","hashOfConfig":"13"},{"size":1379,"mtime":1611712494159,"results":"18","hashOfConfig":"13"},{"size":2431,"mtime":1611624017598,"results":"19","hashOfConfig":"13"},{"size":263,"mtime":1611717267443,"results":"20","hashOfConfig":"13"},{"size":280,"mtime":1611248232318,"results":"21","hashOfConfig":"13"},{"size":1197,"mtime":1611263320983,"results":"22","hashOfConfig":"13"},{"size":694,"mtime":1611589369369,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},"j3537p",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"27"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/justinc/Flatiron/projects/phase5/frontend/src/components/Home.js",["51","52","53","54","55","56","57","58"],"import React, { createContext, useState, useEffect } from 'react'\nimport ChatRooms from './ChatRooms'\nimport Messages from './Messages'\n// import SearchRoom from './SearchRoom';\nimport SubList from './SubList'\nimport actionCable from 'actioncable'\nimport { ActionCable } from 'react-actioncable-provider';\nimport { API_ROOT } from '../constants';\n\n\nconst CableApp = {}\nCableApp.cable = actionCable.createConsumer('ws://localhost:3000/cable')\nexport const ActionCableContext = createContext()\n\n\nexport default function Home(props) {\n    \n    const openRoomSubs = (chat_room) => {\n        fetch('http://localhost:3000/sublist')\n        .then(res => res.json())\n        .then(sublist => console.log(sublist))\n    }\n\n    const [openRoom, setOpenRoom] = useState();\n    \n    const handleOpenRoom = (room) => {\n        if(room !== undefined){\n            setOpenRoom(room)\n            localStorage.setItem('openRoom', room)\n            setRoomMessages(room.messages)\n        }\n        // const [messages, setMessages] = useState({\n        //     messages: room.messages\n        // })\n\n        console.log(room.messages)\n    }\n    const [cable, setCable] = useState()\n    const [roomMessages, setRoomMessages] = useState(openRoom?.messages)\n    useEffect(() => {\n        let connection\n      const cable = actionCable.createConsumer('ws://localhost:3000/cable') \n      connection = cable.subscriptions.create(\n          { channel: 'ChatRoomsChannel', chat_room_id: openRoom?.id},\n          {\n              connected: () => \n              console.log('connected'),\n              received: (data) => {\n                  updateMessages(data);\n                //   updateAppStateRoom(data)\n                  console.log(data)\n              }\n          }\n      )\n    }, [openRoom])\n    // if (message.user === current_user)\n    const updateMessages = (newMessage) => {\n        setRoomMessages([...roomMessages, newMessage])\n         console.log(roomMessages);\n    }\n\n    console.log(openRoom);\n    const [currentRoom, setCurrentRoom] = useState({})\n    const getRoomData = (id) => {\n        fetch(`http://localhost:3000/chat_rooms/${openRoom}`)\n        .then(res => res.json())\n        .then(room => setCurrentRoom({\n            \n                room: room,\n                subs: room.subs,\n                messages: room.messages\n            \n        }))\n    }\n\n     const updateAppStateRoom = (newRoom) => {\n        setCurrentRoom({\n           \n                room: newRoom,\n                subs: newRoom.subs,\n                messages: newRoom.messages\n            \n        })\n    }\n    return (\n        <div id='chat-container'>\n            <div id=\"side-bar\">\n            <div>\n                \n                <h2>\n                    {props.user.username}\n                </h2>\n            </div>\n            {/* <SearchRoom rooms={props.rooms} /> */}\n            <ChatRooms handleOpenRoom={handleOpenRoom} />\n            </div>\n            <div id=\"chat-window\">\n            <Messages \n                user={props.user} \n                updateApp={updateAppStateRoom}\n                getRoomData={getRoomData}\n                roomData={currentRoom}\n                cableApp={CableApp} \n                roomMessages={roomMessages} \n                setOpenRoom={setOpenRoom} \n                updateMessages={updateMessages}  \n                openRoom={openRoom} \n            />\n            {/* <SubList openRoomSubs={openRoomSubs} /> */}\n            </div>\n\n            \n        </div>\n    )\n}\n",["59","60"],"/Users/justinc/Flatiron/projects/phase5/frontend/src/components/ChatRoomWebSocket.js",[],"/Users/justinc/Flatiron/projects/phase5/frontend/src/components/Messages.js",["61","62","63","64"],"import React, {useContext, useEffect, useState} from 'react'\nimport { ActionCableContext } from './Home'\nimport NewMessage from './NewMessage'\nimport Subscribe from './Subscribe'\nimport ChatRoomWebSocket from './ChatRoomWebSocket'\nimport { ActionCableConsumer } from 'react-actioncable-provider'\n\n\n\nexport default function Messages(props) {\n    const cable = useContext(ActionCableContext)\n    const [channel, setChannel] = useState(null)\n    useEffect(() => {\n        console.log(props.roomMessages);\n    })\n    const whichUser = (message) => {\n        if (message.user_id === props.user.id) {\n            return 'current-user-message'\n        } else {\n            return 'other-user-message'\n        }\n    }\n    \n\n    return (\n        <ActionCableConsumer>\n        <div>\n             <Subscribe openRoom={props.openRoom} />  \n            {props.roomMessages?.map(message =>\n            \n            <span className={whichUser(message)} user={message.user}>\n                <div key={message.id} user={message.user}>{message.content}</div>\n                <h4>{message.user?.username}</h4>\n             </span> \n            \n           \n            )\n            }\n            {/* <ChatRoomWebSocket\n                cableApp={props.cableApp}\n                dateApp={props.updateApp}\n                getRoomData={props.getRoomData}\n            /> */}\n            { props.openRoom ?  <NewMessage className='new-message-bar' roomMessages={props.roomMessages} updateMessages={props.updateMessages} openRoom={props.openRoom} user={props.user} setOpenRoom={props.setOpenRoom}/> : <h2>Click on a room to Chat</h2> }\n            \n        </div>\n        </ActionCableConsumer>\n    )\n}\n",["65","66"],"/Users/justinc/Flatiron/projects/phase5/frontend/src/App.js",["67","68","69","70","71"],"/Users/justinc/Flatiron/projects/phase5/frontend/src/constants/index.js",[],"/Users/justinc/Flatiron/projects/phase5/frontend/src/components/NewMessage.js",["72","73"],"/Users/justinc/Flatiron/projects/phase5/frontend/src/components/LoginForm.js",["74","75","76","77"],"import React, { useState } from 'react'\nimport { FormGroup } from '@material-ui/core';\nimport { FormLabel } from '@material-ui/core';\nimport { Input } from '@material-ui/core';\nimport RegistrationForm from './RegistrationForm';\nimport { Link, Redirect } from 'react-router-dom'\n\n\nexport default function LoginForm({ Login, error, props }) {\n    const [details, setDetails] = useState({\n        username: '', \n        email: '', \n        password: '',\n        \n    });\n\n    const submitHandler = e => {\n        e.preventDefault();\n        let user = {\n            username: details.username,\n            email: details.email,\n            password: details.password\n\n        }\n        let reqObj = {\n            headers: { 'Content-Type': 'application/json' },\n            method: 'POST',\n            body: JSON.stringify(user)\n        };\n        fetch('http://localhost:3000/login', reqObj)\n        .then(res => res.json())\n        .then(user => Login(user))\n        .then(user => console.log(user))\n        // props.Login(user)\n        // console.log(details)\n    }\n\n    // console.log(props.currentUser)\n    return (\n        localStorage.getItem('current_user') ? <Redirect to='/home' /> :\n        <form onSubmit={(e) => submitHandler(e)}>\n            <div className='form-inner'>\n                <h2>Login</h2>\n                {(error != \"\") ? ( <div className='error'>{error}</div> ) : \"\"}\n                <div className='form-group'>\n                    <input type='text' placeholder='Username' onChange={e => setDetails({...details, username: e.target.value})} value={details.username} name='username' id='username' />\n                </div>\n                <div className='form-group'>\n                    <input type='email' placeholder='Email' value={details.email} onChange={e => setDetails({...details, email: e.target.value})}  name='email' id='email' />                \n                </div>\n                <div className='form-group'>\n                    <input type='password' placeholder='Password' value={details.password} onChange={e => setDetails({...details, password: e.target.value})} name='password' id='password' />\n                </div>\n                \n                <input type='submit' value='Login' />\n                <Link to={<RegistrationForm />} >\n                <input type='submit' value='New to us? Sign Up' /> \n\n                </Link>\n            </div>\n        </form>\n       \n    )\n}\n\n","/Users/justinc/Flatiron/projects/phase5/frontend/src/components/SubList.js",[],"/Users/justinc/Flatiron/projects/phase5/frontend/src/components/Room.js",[],"/Users/justinc/Flatiron/projects/phase5/frontend/src/components/NewRoom.js",["78","79"],"/Users/justinc/Flatiron/projects/phase5/frontend/src/components/Subscribe.js",[],{"ruleId":"80","severity":1,"message":"81","line":5,"column":8,"nodeType":"82","messageId":"83","endLine":5,"endColumn":15},{"ruleId":"80","severity":1,"message":"84","line":7,"column":10,"nodeType":"82","messageId":"83","endLine":7,"endColumn":21},{"ruleId":"80","severity":1,"message":"85","line":8,"column":10,"nodeType":"82","messageId":"83","endLine":8,"endColumn":18},{"ruleId":"80","severity":1,"message":"86","line":18,"column":11,"nodeType":"82","messageId":"83","endLine":18,"endColumn":23},{"ruleId":"80","severity":1,"message":"87","line":38,"column":12,"nodeType":"82","messageId":"83","endLine":38,"endColumn":17},{"ruleId":"80","severity":1,"message":"88","line":38,"column":19,"nodeType":"82","messageId":"83","endLine":38,"endColumn":27},{"ruleId":"80","severity":1,"message":"89","line":43,"column":7,"nodeType":"82","messageId":"83","endLine":43,"endColumn":17},{"ruleId":"90","severity":1,"message":"91","line":55,"column":8,"nodeType":"92","endLine":55,"endColumn":18,"suggestions":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"80","severity":1,"message":"98","line":5,"column":8,"nodeType":"82","messageId":"83","endLine":5,"endColumn":25},{"ruleId":"80","severity":1,"message":"87","line":11,"column":11,"nodeType":"82","messageId":"83","endLine":11,"endColumn":16},{"ruleId":"80","severity":1,"message":"99","line":12,"column":12,"nodeType":"82","messageId":"83","endLine":12,"endColumn":19},{"ruleId":"80","severity":1,"message":"100","line":12,"column":21,"nodeType":"82","messageId":"83","endLine":12,"endColumn":31},{"ruleId":"94","replacedBy":"101"},{"ruleId":"96","replacedBy":"102"},{"ruleId":"80","severity":1,"message":"103","line":4,"column":42,"nodeType":"82","messageId":"83","endLine":4,"endColumn":48},{"ruleId":"80","severity":1,"message":"104","line":11,"column":9,"nodeType":"82","messageId":"83","endLine":11,"endColumn":18},{"ruleId":"80","severity":1,"message":"105","line":18,"column":17,"nodeType":"82","messageId":"83","endLine":18,"endColumn":25},{"ruleId":"80","severity":1,"message":"106","line":36,"column":17,"nodeType":"82","messageId":"83","endLine":36,"endColumn":25},{"ruleId":"80","severity":1,"message":"107","line":39,"column":9,"nodeType":"82","messageId":"83","endLine":39,"endColumn":12},{"ruleId":"80","severity":1,"message":"108","line":2,"column":10,"nodeType":"82","messageId":"83","endLine":2,"endColumn":16},{"ruleId":"80","severity":1,"message":"109","line":3,"column":8,"nodeType":"82","messageId":"83","endLine":3,"endColumn":16},{"ruleId":"80","severity":1,"message":"110","line":2,"column":10,"nodeType":"82","messageId":"83","endLine":2,"endColumn":19},{"ruleId":"80","severity":1,"message":"111","line":3,"column":10,"nodeType":"82","messageId":"83","endLine":3,"endColumn":19},{"ruleId":"80","severity":1,"message":"112","line":4,"column":10,"nodeType":"82","messageId":"83","endLine":4,"endColumn":15},{"ruleId":"113","severity":1,"message":"114","line":44,"column":25,"nodeType":"115","messageId":"116","endLine":44,"endColumn":27},{"ruleId":"80","severity":1,"message":"117","line":1,"column":27,"nodeType":"82","messageId":"83","endLine":1,"endColumn":35},{"ruleId":"80","severity":1,"message":"118","line":1,"column":37,"nodeType":"82","messageId":"83","endLine":1,"endColumn":42},"no-unused-vars","'SubList' is defined but never used.","Identifier","unusedVar","'ActionCable' is defined but never used.","'API_ROOT' is defined but never used.","'openRoomSubs' is assigned a value but never used.","'cable' is assigned a value but never used.","'setCable' is assigned a value but never used.","'connection' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateMessages'. Either include it or remove the dependency array.","ArrayExpression",["119"],"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"'ChatRoomWebSocket' is defined but never used.","'channel' is assigned a value but never used.","'setChannel' is assigned a value but never used.",["120"],["121"],"'Switch' is defined but never used.","'adminUser' is assigned a value but never used.","'setRooms' is assigned a value but never used.","'setError' is assigned a value but never used.","'obj' is assigned a value but never used.","'render' is defined but never used.","'Messages' is defined but never used.","'FormGroup' is defined but never used.","'FormLabel' is defined but never used.","'Input' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'setRooms' is defined but never used.","'rooms' is defined but never used.",{"desc":"122","fix":"123"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [openRoom, updateMessages]",{"range":"124","text":"125"},[1758,1768],"[openRoom, updateMessages]"]